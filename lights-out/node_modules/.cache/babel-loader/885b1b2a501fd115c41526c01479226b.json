{"ast":null,"code":"import _slicedToArray from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/parth-pc/ReactProjects/Projects/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/parth-pc/ReactProjects/Projects/lights-out/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Board)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n\n    _this.createBoard = function () {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var rows = [];\n\n      for (var y = 0; y < _this.props.nrows.length; y++) {\n        for (var x = 0; x < _this.props.ncols.length; x++) {\n          rows.push(Math.random() < _this.props.chanceLightStartsOn);\n        }\n\n        board.push(rows);\n      }\n\n      return board;\n    };\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({ board, hasWon });\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tbleCols = [];\n      var row = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            isLit: this.state.board[y][x],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tbleCols.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, tbleCols)); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;\n/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n/** handle changing a cell: update board & determine if winner */\n\n/** Render game board or winning message. */","map":{"version":3,"sources":["/home/parth-pc/ReactProjects/Projects/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","state","hasWon","board","createBoard","rows","y","props","nrows","length","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","tbleCols","row","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nclass Board extends Component {\n  state = { hasWon: false, board: this.createBoard() };\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n  createBoard = () => {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let rows = [];\n    for (let y = 0; y < this.props.nrows.length; y++) {\n      for (let x = 0; x < this.props.ncols.length; x++) {\n        rows.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(rows);\n    }\n    return board;\n  };\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({ board, hasWon });\n  }\n  render() {\n    let tbleCols = [];\n    let row = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(<Cell isLit={this.state.board[y][x]} />);\n      }\n      tbleCols.push(<tr>{row}</tr>);\n    }\n    return (\n      <table className=\"board\">\n        <tbody>{tbleCols}</tbody>\n      </table>\n    );\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\nexport default Board;\n\n/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n/** handle changing a cell: update board & determine if winner */\n\n/** Render game board or winning message. */\n"]},"metadata":{},"sourceType":"module"}